#![allow(unused)]

extern crate memmap;

use std::fs::OpenOptions;
use std::path::Path;
use memmap::{Mmap, MmapMut};
use std::env;
use std::fs::File;
use std::io::{self, Write};

/*
/// Output a file's contents to stdout. The file path must be provided as the first process
/// argument.
fn main() {
    let path = env::args()
        .nth(1)
        .expect("supply a single path as the program argument");

    let file = File::open(path).expect("failed to open the file");

    let mmap = unsafe { Mmap::map(&file).expect("failed to map the file") };

    io::stdout()
        .write_all(&mmap[..])
        .expect("failed to output the file contents");
}
*/





fn main() {

    let file = OpenOptions::new()
        .read(true)
        .write(true)
        .open(Path::new("/dev/mydevice"))
        //.unwrap()
        .expect("failed to open the file");

    let mut map = unsafe { MmapMut::map_mut(&file).unwrap() };

    // Now you can use map like a slice of u8
    map[0] = 0xff;


}